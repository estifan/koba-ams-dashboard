"use client";

import { gql } from "@apollo/client";
import { useQuery } from "@apollo/client/react";
import { Download, Settings2 } from "lucide-react";

const OVER_USAGE_BY_GROUP = gql`
  query OverUsageByGroup($month: Month!, $year: Int!) {
    overUsageByGroup(month: $month, year: $year) {
      groupName
      totalOverUsage
      employeeCount
    }
  }
`;

const formatCurrency = (amount) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'ETB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
};

export default function OverUsagePage() {
  const currentDate = new Date();
  const currentMonth = currentDate.toLocaleString('default', { month: 'long' }).toUpperCase();
  const currentYear = currentDate.getFullYear();

  const { data, loading, error } = useQuery(OVER_USAGE_BY_GROUP, {
    variables: {
      month: currentMonth,
      year: currentYear
    },
    fetchPolicy: 'cache-and-network'
  });

  if (loading) return (
    <div className="flex items-center justify-center h-64">
      <div className="text-gray-500">Loading over-usage cases...</div>
    </div>
  );

  if (error) return (
    <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-lg p-4 text-red-600 dark:text-red-400">
      Error loading over-usage cases: {error.message}
    </div>
  );

  // Process group data
  const rows = data?.overUsageByGroup?.map(group => ({
    employee: `${group.employeeCount} employees`,
    group: group.groupName,
    over: group.totalOverUsage,
    firstAt: 'N/A',
    lastTxn: 'N/A',
    status: 'Group Summary',
    allowed: 0, // Not available in the current schema
    used: 0     // Not available in the current schema
  })) || [];

  // Get summary stats
  const totalOverUsage = data?.overUsageByGroup?.reduce((sum, group) => sum + (group.totalOverUsage || 0), 0) || 0;
  const totalEmployees = data?.overUsageByGroup?.reduce((sum, group) => sum + (group.employeeCount || 0), 0) || 0;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Over-Usage Cases</h1>
          <p className="text-gray-500 dark:text-gray-400 mt-1">
            Managing {totalEmployees} employees with over-usage in {currentMonth} {currentYear}
          </p>
        </div>
        <div className="flex gap-2">
          <button className="px-3 py-2 rounded-lg bg-emerald-600 hover:bg-emerald-500 text-white text-sm inline-flex items-center gap-2">
            <Download size={16}/> Export Report
          </button>
          <button className="px-3 py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 text-sm inline-flex items-center gap-2">
            <Settings2 size={16}/> Configure Alerts
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Total Over-Usage</h3>
          <p className="mt-1 text-2xl font-semibold text-rose-600">{formatCurrency(totalOverUsage)}</p>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">across all employees</p>
        </div>
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Employees with Issues</h3>
          <p className="mt-1 text-2xl font-semibold text-yellow-500">{totalEmployees}</p>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">exceeding allowance</p>
        </div>
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200 dark:border-gray-700">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Average Over-Usage</h3>
          <p className="mt-1 text-2xl font-semibold text-rose-500">
            {totalEmployees > 0 ? formatCurrency(totalOverUsage / totalEmployees) : formatCurrency(0)}
          </p>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">per employee</p>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Group</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Employees</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Over-Usage</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {rows.map((row, i) => (
                <tr key={i} className="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                    {row.group}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-200">
                    {row.employee}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-rose-600 font-medium">
                    -{formatCurrency(row.over || 0)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400">
                      {row.status}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
